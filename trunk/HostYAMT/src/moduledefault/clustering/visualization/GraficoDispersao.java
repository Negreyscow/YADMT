/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduledefault.clustering.visualization;

import java.awt.Color;
import java.awt.Graphics;
import moduledefault.clustering.aco.ACOClustering;

/**
 *
 * @author Mateus
 */
public class GraficoDispersao extends javax.swing.JPanel {

    /**
     * Creates new form GraficoDispersao
     */
    private static int [][] matrizPadroes;

    GraficoDispersao(int[][]  a) {
        matrizPadroes = a;
        initComponents();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        int width = ClusteringFrameVisualization.getFundoDispersão().getWidth();
        int height = ClusteringFrameVisualization.getFundoDispersão().getHeight();

        float w = width / 2;
        float h = height / 2;

        int centroWidth = (int) w;
        int centroHeight = (int) h;


        int x0 = width - (width - 50);
        int y0 = height - (height - 50);
        int x2 = width - 50;
        int y2 = height - 50;

        g.setColor(Color.black);
        g.drawString("1", x0, y0);
        g.drawString("2", x2, y0);
        g.drawString("3", x0, y2);
        g.drawString("4", x2, y2);

        g.drawLine(x0, y0, x2, y0);
        g.drawLine(x0, y0, x0, y2);
        g.drawLine(x2, y0, x2, y2);
        g.drawLine(x0, y2, x2, y2);
//        787
//                525
        System.out.println("vai fazer");
        for (int i = 0; i < ClusteringFrameVisualization.getDados().getDimensão_matriz(); i++) {
            for (int j = 0; j < ClusteringFrameVisualization.getDados().getDimensão_matriz(); j++) {
                if (matrizPadroes[i][j] != 0) {
//                    int x = 50 + (int) ((ClusteringFrameVisualization.getDados().getMatriz_dados()[i][1] / 10) * (width - 120));
//                    int y = (height - 70) - (int) ((ClusteringFrameVisualization.getDados().getMatriz_dados()[i][2] / 10) * (height - 120));
                    int x = x0 +i *( (((width-100)/ClusteringFrameVisualization.getDados().getDimensão_matriz())));
                    int y = y0 + j* ((((height-100)/ClusteringFrameVisualization.getDados().getDimensão_matriz()))) ;
                    switch (ClusteringFrameVisualization.getDados().getGrupos()[(matrizPadroes[i][j]-1)]) {
                        case "Iris-setosa":
                            g.setColor(Color.red);
                            break;
                        case "Iris-versicolor":
                            g.setColor(Color.blue);
                            break;
                        default:
                            g.setColor(Color.green);
                            break;
                    }
                    g.fillOval(x, y, 10, 10);
                }
            }
        }
        g.setColor(Color.black);

//        if (rede != null) {
//            for (int i = 0; i < rede.getGridX(); i++) {
//                for (int j = 0; j < rede.getGridY(); j++) {
//                    int x = 50 +(int) (rede.getNeuronio(i, j).getPesos().get(0) * (width-120));
//                    int y = (height-70) - (int) (rede.getNeuronio(i, j).getPesos().get(1) * (height-120));
//                    g.fillOval(x, y, 8, 8);
//                }
//            }
//            for (int i = 0; i < rede.getGridX(); i++) {
//                for (int j = 0; j < rede.getGridY() - 1; j++) {
//                    int x = 50 +(int) (rede.getNeuronio(i, j).getPesos().get(0) * (width-120));
//                    int y = (height-70) - (int) (rede.getNeuronio(i, j).getPesos().get(1) * (height-120));
//                    int x1 = 50 +(int) (rede.getNeuronio(i, j + 1).getPesos().get(0) * (width-120));
//                    int y1 = (height-70) - (int) (rede.getNeuronio(i, j + 1).getPesos().get(1) * (height-120));
//                    g.drawLine(x, y, x1, y1);
//                }
//            }
//
//            for (int i = 0; i < rede.getGridX() - 1; i++) {
//                for (int j = 0; j < rede.getGridY(); j++) {
//                    int x = 50 +(int) (rede.getNeuronio(i, j).getPesos().get(0) * (width-120));
//                    int y = (height-70) - (int) (rede.getNeuronio(i, j).getPesos().get(1) * (height-120));
//                    int x1 = 50 +(int) (rede.getNeuronio(i + 1, j).getPesos().get(0) * (width-120));
//                    int y1 = (height-70) - (int) (rede.getNeuronio(i + 1, j).getPesos().get(1) * (height-120));
//                    g.drawLine(x, y, x1, y1);
//                }
//            }
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    void setACO(int[][] a) {
        matrizPadroes = a;
        repaint();
    }
}
