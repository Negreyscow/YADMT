/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduledefault.clustering.visualization;

import java.awt.Graphics;

/**
 *
 * @author Mateus
 */
public class Radviz extends javax.swing.JPanel {

    /**
     * Creates new form Radviz
     */
    public Radviz() {
        initComponents();
    }
    int[] xs;
    int[] ys;

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        int width = TecnicasDispersao.getFundoRadviz().getWidth();
        int height = TecnicasDispersao.getFundoRadviz().getHeight();
        int inicioX = 50;
        int fimX = width - 50;
        int inicioY = 50;
        int fimY = height - 50;
        int centroX = (fimX - inicioX) / 2;
        int centroY = (fimY - inicioY) / 2;
        int raio = (centroY - inicioY);
        calculaPontos(centroX, centroY, raio, 360);

        for (int i = 0; i < 360; i++) {
            g.drawRect(xs[i], ys[i], 1, 1);
        }

        int numEixos = TecnicasDispersao.getMatrizDados().getDataSet().get(0).getAtributos().size();
        int[] eixosX = new int[numEixos];
        int[] eixosY = new int[numEixos];
        double aux = 360 / numEixos;
        double divisoes = aux;
        for (int i = 0; i < numEixos; i++) {
            eixosX[i] = (int) (centroX + raio * Math.cos(Math.toRadians(divisoes)));
            eixosY[i] = (int) (centroY + raio * Math.sin(Math.toRadians(divisoes)));
            divisoes += aux;
        }

        for (int i = 0; i < numEixos; i++) {
            g.drawLine(centroX, centroY, eixosX[i], eixosY[i]);
        }


        for (int i = 0; i < TecnicasDispersao.getMatrizDados().getDataSet().size(); i++) {
            double u1 = 0, u2 = 0;
            double somatorio1 = 0;
            double somatorio2 = 0;
            double somatorio3 = 0;
            double somatorio4 = 0;
            for (int j = 0; j < TecnicasDispersao.getMatrizDados().getDataSet().get(i).getAtributos().size(); j++) {
                somatorio1 += (TecnicasDispersao.getMatrizDados().getDataSet().get(i).getAtributos().get(j) * Math.cos((TecnicasDispersao.getMatrizDados().getDataSet().get(i).getAtributos().get(j))));
                somatorio2 += TecnicasDispersao.getMatrizDados().getDataSet().get(i).getAtributos().get(j);
                somatorio3 += (TecnicasDispersao.getMatrizDados().getDataSet().get(i).getAtributos().get(j) * Math.sin((TecnicasDispersao.getMatrizDados().getDataSet().get(i).getAtributos().get(j))));
                somatorio4 += TecnicasDispersao.getMatrizDados().getDataSet().get(i).getAtributos().get(j);
            }
            u1 = (somatorio1 / somatorio2);
            u2 = (somatorio3 / somatorio4);
            System.out.println(u1 + " " + u2);
            int x =  (int) (u1 * (width - 120));
            int y = (height - 70) - (int) (u2 * (height - 120));

            g.drawRect(x, y, 2, 2);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void calculaPontos(int centroX, int centroY, int raio, int grau) {
        xs = new int[grau];
        ys = new int[grau];
        for (int i = 0; i < grau; i++) {
            xs[i] = (int) (centroX + raio * Math.cos(Math.toRadians(i)));
            ys[i] = (int) (centroY + raio * Math.sin(Math.toRadians(i)));
        }
    }
}
