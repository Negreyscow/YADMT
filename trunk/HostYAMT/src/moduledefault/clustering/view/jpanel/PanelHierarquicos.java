/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduledefault.clustering.view.jpanel;

import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.event.EventListenerList;
import javax.swing.plaf.ComponentUI;
import moduledefault.clustering.hierarquicos.LigaçãoCompletaAgrupamento;
import moduledefault.clustering.hierarquicos.LigaçãoMediaAgrupamento;
import moduledefault.clustering.hierarquicos.LigaçãoSimplesAgrupamento;
import moduledefault.clustering.hierarquicos.WardAgrupamento;
import moduledefault.clustering.uteis.MatrizDados;
import moduledefault.clustering.visualization.TecnicasDispersao;

/**
 *
 * @author Mateus
 */
public class PanelHierarquicos extends javax.swing.JPanel {

    /**
     * Creates new form PanelHierarquicos
     */
    int teste_distancia;
    double[][] matrizDados;
    String[] grupos;
    MatrizDados teste;
    String[] nomesClasses;
    String nomeBase;
    Collection cl;
    StringBuffer b;
    int[][] matrizGrupos;
    int numeroGrupos;
    ArrayList<Integer> elementoPrincipal;
    ArrayList<StringBuffer> listaText;

    public PanelHierarquicos(double[][] base, String[] grupos, String[] aa, String n, Collection classes) {
        initComponents();
        cl = classes;
        this.nomeBase = nomeBase;
        nomesClasses = aa;
        this.matrizDados = base;
        teste = new MatrizDados();
        this.grupos = grupos;
        this.nomeBase = n;
        listaText = new ArrayList<>();
        startMatrizDados();
        buttonVisualizacao.setEnabled(false);
    }

    public String[] getGrupos() {
        return grupos;
    }

    public void setGrupos(String[] grupos) {
        this.grupos = grupos;
    }

    public String[] getNomesClasses() {
        return nomesClasses;
    }

    public void setNomesClasses(String[] nomesClasses) {
        this.nomesClasses = nomesClasses;
    }

    public String getNomeBase() {
        return nomeBase;
    }

    public void setNomeBase(String nomeBase) {
        this.nomeBase = nomeBase;
    }

    public Collection getCl() {
        return cl;
    }

    public void setCl(Collection cl) {
        this.cl = cl;
    }

    public int[][] getMatrizGrupos() {
        return matrizGrupos;
    }

    public void setMatrizGrupos(int[][] matrizGrupos) {
        this.matrizGrupos = matrizGrupos;
    }

    public int getNumeroGrupos() {
        return numeroGrupos;
    }

    public void setNumeroGrupos(int numeroGrupos) {
        this.numeroGrupos = numeroGrupos;
    }

    public ComponentUI getUi() {
        return ui;
    }

    public void setUi(ComponentUI ui) {
        this.ui = ui;
    }

    public EventListenerList getListenerList() {
        return listenerList;
    }

    public void setListenerList(EventListenerList listenerList) {
        this.listenerList = listenerList;
    }

    public double[][] getMatrizDados() {
        return matrizDados;
    }

    public void setMatrizDados(double[][] matrizDados) {
        this.matrizDados = matrizDados;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonExecutar = new javax.swing.JButton();
        buttonVisualizacao = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxDistancias = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxMetodos = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        listResultados = new java.awt.List();

        setPreferredSize(new java.awt.Dimension(718, 458));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        buttonExecutar.setText("Executar");
        buttonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExecutarActionPerformed(evt);
            }
        });

        buttonVisualizacao.setText("Visualizar");
        buttonVisualizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVisualizacaoActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Distância"));

        jLabel1.setText("Função de Distância:");

        jComboBoxDistancias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Chebyshev","CityBlock","Correlação" ,"Cosseno", "Euclidiana", "Mahalanobis" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jComboBoxDistancias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDistancias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Método:"));

        jLabel2.setText("Método:");

        jComboBoxMetodos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Completa", "Média", "Simples","Ward" }));
        jComboBoxMetodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMetodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jComboBoxMetodos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jComboBoxMetodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Lista de Resultados")));

        listResultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listResultadosMouseClicked(evt);
            }
        });
        listResultados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listResultadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listResultados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(listResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonExecutar, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(buttonVisualizacao, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonExecutar)
                        .addGap(18, 18, 18)
                        .addComponent(buttonVisualizacao)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 61, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonVisualizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVisualizacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonVisualizacaoActionPerformed

    private void jComboBoxMetodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMetodosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxMetodosActionPerformed

    private void buttonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExecutarActionPerformed


        switch (this.jComboBoxDistancias.getSelectedIndex()) {
            case 0:
                JOptionPane.showMessageDialog(null, "Selecione uma Medida de Distância.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                return;
            case 1:
                teste_distancia = 1;
                break;
            case 2:
                teste_distancia = 2;
                break;
            case 3:
                teste_distancia = 3;
                break;
            case 4:
                teste_distancia = 4;
                break;
            case 5:
                teste_distancia = 5;
                break;
            case 6:
                teste_distancia = 6;
                break;
            default:
                break;
        }

        switch (this.jComboBoxMetodos.getSelectedIndex()) {
            case 0:
                JOptionPane.showMessageDialog(null, "Selecione um Método.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                return;
            case 1:
                int[][] m = new int[teste.getDimensão_matriz()][teste.getDimensão_matriz()];
                m = pmat(m);
                LigaçãoCompletaAgrupamento LC = new LigaçãoCompletaAgrupamento(m, teste, teste_distancia);
                LC.inicio();
                int[][] matrizDendograma = LC.getMdend();
                avaliaLigacao(matrizDendograma);
                imprimiAgrupamento();
                imprimiRecuperacao();
                setListaResultados();
                jTextArea1.setText(getBuffer().toString());
                break;
            case 2:
                m = new int[teste.getDimensão_matriz()][teste.getDimensão_matriz()];
                m = pmat(m);
                LigaçãoMediaAgrupamento LM = new LigaçãoMediaAgrupamento(m, teste, teste_distancia);
                LM.inicio();
                matrizDendograma = LM.getMdend();
                avaliaLigacao(matrizDendograma);
                imprimiAgrupamento();
                imprimiRecuperacao();
                setListaResultados();
                jTextArea1.setText(getBuffer().toString());
                break;
            case 3:
                m = new int[teste.getDimensão_matriz()][teste.getDimensão_matriz()];
                m = pmat(m);
                LigaçãoSimplesAgrupamento LS = new LigaçãoSimplesAgrupamento(m, teste, teste_distancia);
                LS.inicio();
                matrizDendograma = LS.getMdend();
                avaliaLigacao(matrizDendograma);
                imprimiAgrupamento();
                imprimiRecuperacao();
                setListaResultados();
                jTextArea1.setText(getBuffer().toString());
                break;
            case 4:
                m = new int[teste.getDimensão_matriz()][teste.getDimensão_matriz()];
                m = pmat(m);
                WardAgrupamento W = new WardAgrupamento(m, teste, teste_distancia);
                W.inicio();
                matrizDendograma = W.getMdend();
                avaliaLigacao(matrizDendograma);
                imprimiAgrupamento();
                imprimiRecuperacao();
                setListaResultados();
                jTextArea1.setText(getBuffer().toString());
                break;
            default:
                break;
        }
    }//GEN-LAST:event_buttonExecutarActionPerformed

    private void listResultadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listResultadosMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (listResultados.getSelectedIndex() != -1) {
                StringBuffer text = listaText.get(listResultados.getSelectedIndex());
                jTextArea1.setText(text.toString());
            }
        }
    }//GEN-LAST:event_listResultadosMouseClicked

    private void listResultadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listResultadosActionPerformed
    }//GEN-LAST:event_listResultadosActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonExecutar;
    private javax.swing.JButton buttonVisualizacao;
    private static javax.swing.JComboBox jComboBoxDistancias;
    private static javax.swing.JComboBox jComboBoxMetodos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.List listResultados;
    // End of variables declaration//GEN-END:variables

    public void startMatrizDados() {
        String grupo;
        grupo = grupos[0];
        ArrayList<String> atributos = new ArrayList<>();
        double[][] base = new double[this.matrizDados.length][this.matrizDados[0].length + 1];
        for (int i = 0; i < this.matrizDados.length; i++) {
            for (int j = 0; j < this.matrizDados[0].length; j++) {
                base[i][j + 1] = this.matrizDados[i][j];
            }
        }
        int contadorGrupos = 1;
        for (int i = 0; i < grupos.length; i++) {
            if (!grupo.equals(grupos[i])) {
                grupo = grupos[i];
                contadorGrupos++;
            }
            base[i][0] = contadorGrupos;
        }


        teste.setClasses(nomesClasses);
        teste.setColunas(base[0].length);
        teste.setLinhas(base.length);
        teste.setDimensão_matriz();
        teste.setMatriz_dados(base);
        teste.setGrupos(grupos);
        teste.setRealClasses((List) cl);

        TecnicasDispersao.getInstance().setSetou(false);
        TecnicasDispersao.getInstance().setMatrizDados(teste);
        TecnicasDispersao.getInstance().setCombos();

    }

    int[][] pmat(int[][] matriz) {
        int i = 0, j = 0, x = 0, y;
        Random random = new Random();
        for (i = 0; i < teste.getDimensão_matriz(); i++) {
            for (j = 0; j < teste.getDimensão_matriz(); j++) {
                matriz[i][j] = 0;
            }
        }
        for (y = 1; y <= matriz.length; y++) {//coloca os padroes sem repetir na grade
            do {
                i = random.nextInt((int) teste.getDimensão_matriz());
                j = random.nextInt((int) teste.getDimensão_matriz());
            } while (matriz[i][j] != 0);
            x++;
            if (matriz[i][j] == 0) {
                matriz[i][j] = x;
            }
        }
        return matriz;
    }

    private void avaliaLigacao(int[][] matrizDendograma) {
        int[] gruposFinais = matrizDendograma[matrizDendograma.length - 3];

        numeroGrupos = 0;
        int grupoInicial;
        elementoPrincipal = new ArrayList<>();
        numeroGrupos = 0;
        grupoInicial = gruposFinais[0];
        for (int i = 1; i < gruposFinais.length; i++) {
            boolean existe = false;
            if (gruposFinais[i] != grupoInicial) {
                for (int j = 0; j < elementoPrincipal.size(); j++) {
                    if (elementoPrincipal.get(j) == grupoInicial) {
                        existe = true;
                        break;
                    }
                }
                if (!existe) {
                    elementoPrincipal.add(grupoInicial);
                    grupoInicial = gruposFinais[i];
                    numeroGrupos++;
                }
            }
        }
        matrizGrupos = new int[2][gruposFinais.length];
        for (int i = 0; i < elementoPrincipal.size(); i++) {
            for (int j = 0; j < gruposFinais.length; j++) {
                if (elementoPrincipal.get(i) == gruposFinais[j]) {
                    matrizGrupos[0][j] = j + 1;
                    matrizGrupos[1][j] = i + 1;
                }
            }
        }

    }

    synchronized void imprimiAgrupamento() {
        StringBuffer buffer = new StringBuffer();
        setBuffer(buffer);
        getBuffer().append("===================== Informações =====================");
        getBuffer().append("\n\t\t\tYADMT.Clustering.Hierárquicos");
        getBuffer().append("\n\t Base: " + nomeBase);
        getBuffer().append("\n\t Número de Instâncias: " + teste.getLinhas());
        getBuffer().append("\n\t Atributos: " + (teste.getColunas() - 1));
        getBuffer().append("\n\t Classes:");
        for (int i = 0; i < nomesClasses.length; i++) {
            getBuffer().append("\n\t\t" + nomesClasses[i]);
        }

        switch (jComboBoxMetodos.getSelectedIndex()) {
            case 1:
                getBuffer().append("\n\tMétodo:\n  \tLigação Completa.\n");
                break;
            case 2:
                getBuffer().append("\n\tMétodo:\n  \tLigação Média.\n");
                break;
            case 3:
                getBuffer().append("\n\tMétodo:\n  \tLigação Simples.\n");
                break;
            case 4:
                getBuffer().append("\n\tMétodo:\n  \tWard.\n");
                break;
        }
        switch (teste_distancia) {
            case 1:
                getBuffer().append("\tMedida de Distância:\n  \tChebyshev");
                break;
            case 2:
                getBuffer().append("\tMedida de Distância:\n  \tCityblock");
                break;
            case 3:
                getBuffer().append("\tMedida de Distância:\n  \tCorrelação");
                break;
            case 4:
                getBuffer().append("\tMedida de Distância:\n  \tCosseno");
                break;
            case 5:
                getBuffer().append("\tMedida de Distância:\n  \tEuclidiana");
                break;
            case 6:
                getBuffer().append("\tMedida de Distância:\n  \tMahalanobis");
                break;
            default:
                break;
        }
    }

    synchronized void imprimiRecuperacao() {

        getBuffer().append("\n\nGrupos Formados:\n\n");
        for (int j = matrizGrupos[0].length - 1; j >= 1; j--) {
            for (int i = 0; i < j; i++) {
                if (matrizGrupos[0][i] > matrizGrupos[0][i + 1]) {
                    int auxLinha = matrizGrupos[0][i];
                    int auxColuna = matrizGrupos[1][i];
                    matrizGrupos[0][i] = matrizGrupos[0][i + 1];
                    matrizGrupos[1][i] = matrizGrupos[1][i + 1];
                    matrizGrupos[0][i + 1] = auxLinha;
                    matrizGrupos[1][i + 1] = auxColuna;
                }
            }
        }

        String padrao;
        for (int k = 0; k < this.numeroGrupos; k++) {
            int cont = 1;
            getBuffer().append("Grupo: " + (k + 1) + " Padrão: [" + elementoPrincipal.get(k) + "]" + "\n\n");
            for (int j = 0; j < matrizGrupos[0].length; j++) {
                if (matrizGrupos[1][j] == (k + 1)) {

                    padrao = matrizGrupos[0][j] + "";
                    switch (padrao.length()) {
                        case 1:
                            padrao += "   ";
                            break;
                        case 2:
                            padrao += "  ";
                            break;
                        case 3:
                            padrao += " ";
                            break;
                    }

                    getBuffer().append(padrao);
                    if (cont % 10 == 0) {
                        getBuffer().append("\n");
                        cont = 0;
                    }
                    cont++;
                }
            }
            getBuffer().append("\n\n-------------------------------------------------------\n\n");
        }
    }

    public StringBuffer getBuffer() {
        return b;
    }

    public void setBuffer(StringBuffer b) {
        this.b = b;
    }

    private void setListaResultados() {
        PanelHierarquicos.ClusteringText text = new PanelHierarquicos.ClusteringText();
        String s = text.toString(jComboBoxMetodos.getSelectedIndex());
        text.setJTextArea(jTextArea1);
        listResultados.add(s);
        listaText.add(getBuffer());
    }

    class ClusteringText {

        final DateFormat formatter;
        private JTextArea text;
        private Date date;

        public ClusteringText() {
            date = new Date();
            formatter = new SimpleDateFormat("HH:mm:ss");
        }

        /**
         * returns the text area
         *
         * @return
         */
        public JTextArea getJTextArea() {
            return text;
        }

        /**
         * sets the text area
         *
         * @param text
         */
        public void setJTextArea(JTextArea text) {
            this.text = text;
        }

        public String toString(int index) {
            switch (jComboBoxMetodos.getSelectedIndex()) {
                case 1:
                    return formatter.format(date) + " - Ligação Completa";
                case 2:
                    return formatter.format(date) + " - Ligação Média";
                case 3:
                    return formatter.format(date) + " - Ligação Simples";
                case 4:
                    return formatter.format(date) + " - Ward";
                default:
                    return "";
            }

        }
    }
}
