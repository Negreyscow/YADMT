/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package moduledefault.clustering.som.visualization;

import java.awt.Color;
import java.awt.Point;
import java.awt.Polygon;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.vecmath.Point3d;
import moduledefault.clustering.som.Base;
import moduledefault.clustering.som.Neuronio;
import moduledefault.clustering.som.RedeSOM;
import moduledefault.clustering.view.jpanel.PanelSOM;

/**
 *
 * @author Thiago
 */
public final class FrameSomVisualization extends javax.swing.JFrame {

    //Variaveis para o Desenho Rede
    private static Point3d[][] pontos3D;
    private static ArrayList<Point> pontos2D = new ArrayList<>();
    private static ArrayList<Point> pontos2DBase = null;
    private static ArrayList<Point> pontos2DRede = null;
    private static ArrayList<Point> eixos = new ArrayList<>();
    private static Point[][] pontosDraw;
    private static Point[][] pontosDrawRede;
    private static Color cor_fundo = Color.WHITE;
    private static Color cor_linha = Color.BLACK;
    private static Color cor_eixo = Color.BLACK;
    private static double VRP[] = {-250, -300, -100, 1};
    private static double P[] = {0, 0, 0, 1};
    private static int pZ = 0;
    private static int pX = 0;
    private static int pY = 0;
    private static int Dvalue = 250;
    private static int Xminimo = 0;
    private static int Xmaximo = 0;
    private static int Yminimo = 0;
    private static int Ymaximo = 0;
    private static Projetor project;
    private static double Mcartesiano[][] = {{0, 20, 0, 0},
        {0, 0, 20, 0},
        {0, 0, 0, 10},
        {1, 1, 1, 1}}; //Coordenadas para desenho do eixo
    private static double Mpontos[][]; //Pontos da rede 3D
    private static double Mbase[][];  //Pontos da base  3D
    private static boolean exibirEixos = true;
    private static double matrizU[][];
    //
    private static int valueDensidade = 15;
    private static int valueU2D = 10;
    private static int neuronioX;
    private static int neuronioY;
    //
    private static int gridX; //grade de neuronios
    private static int gridY;
    private static int gridMUX; //grade da matriz U
    private static int gridMUY;
    private static int centroX;//centro da matriz 3D
    private static int centroY;
    private static int numPontos;
    private static RedeSOM rede;
    private static Base dados = null;
    //Fim Variaveis para o Desenho da Rede
    private static boolean click = false;
    /*Direção do desenho
     * Canto = 1 [0][0]
     * Canto = 2 [0][j]
     * Canto = 3 [i][0]
     * Canto = 4 [i][j]
     */
    private static int canto1 = 0;
    private static int canto2 = 0;
    //
    private static MatrizU3D u3d;
    private static MatrizU2D u2d;
    private static MatrizDensidade den;
    private static SOMVisualization som;
    //
    private static FrameSomVisualization INSTANCE;

    public FrameSomVisualization() {
        initComponents();
        setLocationRelativeTo(null);
        repaint();

    }

    public static synchronized FrameSomVisualization getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new FrameSomVisualization();
        }
        return INSTANCE;
    }

    public void setVisualization(RedeSOM r, double m[][]) {
        rede = r;
        gridX = r.getGridX();
        gridY = r.getGridY();
        matrizU = m;
        gridMUX = (gridX * 2) - 1;
        gridMUY = (gridY * 2) - 1;
        numPontos = gridMUX * gridMUY;

        float cX = gridMUX / 2;
        float cY = gridMUY / 2;
        centroX = (int) cX;
        centroY = (int) cY;

        P[0] = centroX;
        P[1] = centroY;

        som();
        matrizU3D();
        matrizU2D();
        densidade();
        calcBase3D();
        calcRede3D();
        INSTANCE.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        panelFundoSom = new javax.swing.JPanel();
        panelSOM = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        sliderVelocidade = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        statusProgesso = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jComboBoxEixoX = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxEixoY = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxEixoZ = new javax.swing.JComboBox();
        panel3D = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        sliderU3D = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        panel2D = new javax.swing.JPanel();
        sliderU2D = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        panelDensidade = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textNeuronio = new javax.swing.JTextArea();
        sliderDensidade = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setTitle("SOM - Visualization");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTabbedPane2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jTabbedPane2ComponentResized(evt);
            }
        });

        panelFundoSom.setBackground(new java.awt.Color(255, 255, 255));

        panelSOM.setBackground(new java.awt.Color(255, 255, 255));
        panelSOM.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panelSOMComponentResized(evt);
            }
        });

        javax.swing.GroupLayout panelSOMLayout = new javax.swing.GroupLayout(panelSOM);
        panelSOM.setLayout(panelSOMLayout);
        panelSOMLayout.setHorizontalGroup(
            panelSOMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelSOMLayout.setVerticalGroup(
            panelSOMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        sliderVelocidade.setBackground(new java.awt.Color(255, 255, 255));
        sliderVelocidade.setMaximum(1000);
        sliderVelocidade.setValue(1000);
        sliderVelocidade.setFocusable(false);
        sliderVelocidade.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVelocidadeStateChanged(evt);
            }
        });

        jLabel4.setText("Velocidade Execução:");

        jLabel5.setText("Progresso:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusProgesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sliderVelocidade, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(sliderVelocidade, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(statusProgesso, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jComboBoxEixoX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEixoXActionPerformed(evt);
            }
        });

        jLabel6.setText("Eixo X:");

        jLabel7.setText("Eixo Y:");

        jComboBoxEixoY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEixoYActionPerformed(evt);
            }
        });

        jLabel8.setText("Eixo Z:");

        jComboBoxEixoZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEixoZActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxEixoX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxEixoY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxEixoZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxEixoX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jComboBoxEixoY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBoxEixoZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelFundoSomLayout = new javax.swing.GroupLayout(panelFundoSom);
        panelFundoSom.setLayout(panelFundoSomLayout);
        panelFundoSomLayout.setHorizontalGroup(
            panelFundoSomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelSOM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelFundoSomLayout.setVerticalGroup(
            panelFundoSomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFundoSomLayout.createSequentialGroup()
                .addComponent(panelSOM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane2.addTab("SOM", panelFundoSom);

        panel3D.setBackground(new java.awt.Color(255, 255, 255));
        panel3D.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                panel3DMouseWheelMoved(evt);
            }
        });
        panel3D.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panel3DMouseReleased(evt);
            }
        });
        panel3D.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panel3DComponentResized(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/arrow_left.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/arrow_right.png"))); // NOI18N
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        sliderU3D.setBackground(new java.awt.Color(255, 255, 255));
        sliderU3D.setMinimum(10);
        sliderU3D.setFocusable(false);
        sliderU3D.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderU3DStateChanged(evt);
            }
        });

        jLabel3.setText("Zoom:");

        javax.swing.GroupLayout panel3DLayout = new javax.swing.GroupLayout(panel3D);
        panel3D.setLayout(panel3DLayout);
        panel3DLayout.setHorizontalGroup(
            panel3DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3DLayout.createSequentialGroup()
                .addContainerGap(301, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderU3D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panel3DLayout.setVerticalGroup(
            panel3DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel3DLayout.createSequentialGroup()
                .addContainerGap(434, Short.MAX_VALUE)
                .addGroup(panel3DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sliderU3D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(panel3DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Matriz-U 3D", panel3D);

        panel2D.setBackground(new java.awt.Color(255, 255, 255));
        panel2D.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel2DMouseClicked(evt);
            }
        });
        panel2D.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panel2DComponentResized(evt);
            }
        });

        sliderU2D.setBackground(new java.awt.Color(255, 255, 255));
        sliderU2D.setMinimum(10);
        sliderU2D.setPaintLabels(true);
        sliderU2D.setPaintTicks(true);
        sliderU2D.setSnapToTicks(true);
        sliderU2D.setValue(10);
        sliderU2D.setFocusable(false);
        sliderU2D.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderU2DStateChanged(evt);
            }
        });

        jLabel2.setText("Zoom:");

        javax.swing.GroupLayout panel2DLayout = new javax.swing.GroupLayout(panel2D);
        panel2D.setLayout(panel2DLayout);
        panel2DLayout.setHorizontalGroup(
            panel2DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2DLayout.createSequentialGroup()
                .addContainerGap(415, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderU2D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panel2DLayout.setVerticalGroup(
            panel2DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2DLayout.createSequentialGroup()
                .addContainerGap(428, Short.MAX_VALUE)
                .addGroup(panel2DLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderU2D, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Matriz-U 2D", panel2D);

        panelDensidade.setBackground(new java.awt.Color(255, 255, 255));
        panelDensidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelDensidadeMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelDensidadeMouseReleased(evt);
            }
        });
        panelDensidade.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                panelDensidadeComponentResized(evt);
            }
        });

        textNeuronio.setEditable(false);
        textNeuronio.setColumns(20);
        textNeuronio.setRows(5);
        textNeuronio.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane1.setViewportView(textNeuronio);

        sliderDensidade.setBackground(new java.awt.Color(255, 255, 255));
        sliderDensidade.setMinimum(10);
        sliderDensidade.setPaintLabels(true);
        sliderDensidade.setPaintTicks(true);
        sliderDensidade.setSnapToTicks(true);
        sliderDensidade.setValue(20);
        sliderDensidade.setFocusable(false);
        sliderDensidade.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderDensidadeStateChanged(evt);
            }
        });

        jLabel1.setText("Zoom:");

        javax.swing.GroupLayout panelDensidadeLayout = new javax.swing.GroupLayout(panelDensidade);
        panelDensidade.setLayout(panelDensidadeLayout);
        panelDensidadeLayout.setHorizontalGroup(
            panelDensidadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDensidadeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderDensidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelDensidadeLayout.setVerticalGroup(
            panelDensidadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDensidadeLayout.createSequentialGroup()
                .addGap(0, 332, Short.MAX_VALUE)
                .addGroup(panelDensidadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderDensidade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane2.addTab("Matriz Densidade", panelDensidade);

        jMenu1.setText("Arquivo");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panel3DMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel3DMouseReleased
        //
    }//GEN-LAST:event_panel3DMouseReleased

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if (panel3D.getComponentCount() > 0) {
            panel3D.getComponent(0).setSize(panel3D.getWidth(), panel3D.getHeight());
        }
    }//GEN-LAST:event_formComponentResized

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Thread t = new Thread() {
            @Override
            public void run() {
                giroEsquerda();
            }
        };
        t.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //
    }//GEN-LAST:event_jButton2ActionPerformed

    private void panel2DMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel2DMouseClicked
        //
    }//GEN-LAST:event_panel2DMouseClicked

    private void panelDensidadeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDensidadeMouseClicked
        //
    }//GEN-LAST:event_panelDensidadeMouseClicked

    private void panelDensidadeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDensidadeMouseReleased
        int x1 = evt.getX();
        int y1 = evt.getY();

        int NUM_HEX_CORNERS = 6;
        int[] mCornersX = new int[NUM_HEX_CORNERS];
        int[] mCornersY = new int[NUM_HEX_CORNERS];
        HexGrid mCellMetrics = new HexGrid(valueDensidade);

        boolean aux = false;

        for (int i = 0; i < gridX; i++) {
            for (int j = 0; j < gridY; j++) {
                mCellMetrics.setCellIndex(i, j);
                mCellMetrics.computeCorners(mCornersX, mCornersY);
                Polygon p = new Polygon(mCornersY, mCornersX, NUM_HEX_CORNERS);
                if (p.contains(x1, y1)) {
                    neuronioX = i;
                    neuronioY = j;
                    click = true;
                    aux = true;
                    textNeuronio.setText("");
                    textNeuronio.append("Neurônio: " + i + " - " + j);
                    textNeuronio.append("\nPesos:\n");
                    for (int k = 0; k < rede.getNeuronio(i, j).getNumPesos(); k++) {
                        textNeuronio.append(String.valueOf("[" + rede.getNeuronio(i, j).getPesos().get(k)) + "] ");
                    }
                    textNeuronio.append("\nPadrões Carregados:\n[ ");
                    for (int k = 0; k < rede.getNeuronio(i, j).getPadroes().size(); k++) {
                        textNeuronio.append(String.valueOf(rede.getNeuronio(i, j).getPadroes().get(k).getNumero()) + " ");
                    }
                    textNeuronio.append("]");
                }
            }
        }

        if (!aux) {
            neuronioX = -1;
            neuronioY = -1;
        }
        repaint();
    }//GEN-LAST:event_panelDensidadeMouseReleased

    private void sliderDensidadeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderDensidadeStateChanged
        valueDensidade = sliderDensidade.getValue();
        repaint();
    }//GEN-LAST:event_sliderDensidadeStateChanged

    private void sliderU2DStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderU2DStateChanged
        valueU2D = sliderU2D.getValue();
        repaint();
    }//GEN-LAST:event_sliderU2DStateChanged

    private void sliderU3DStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderU3DStateChanged
        //
    }//GEN-LAST:event_sliderU3DStateChanged

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed

        Thread t = new Thread() {
            @Override
            public void run() {
                giroDireita();
            }
        };
        t.start();
    }//GEN-LAST:event_jButton2MousePressed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        repaint();
    }//GEN-LAST:event_formFocusGained

    private void panelSOMComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelSOMComponentResized
        som();
        repaint();
    }//GEN-LAST:event_panelSOMComponentResized

    private void panel3DComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panel3DComponentResized
        if (u3d != null) {
            matrizU3D();
        }
        repaint();
    }//GEN-LAST:event_panel3DComponentResized

    private void panel2DComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panel2DComponentResized
        matrizU2D();
        repaint();
    }//GEN-LAST:event_panel2DComponentResized

    private void panelDensidadeComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelDensidadeComponentResized
        densidade();
        repaint();
    }//GEN-LAST:event_panelDensidadeComponentResized

    private void jTabbedPane2ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane2ComponentResized
    }//GEN-LAST:event_jTabbedPane2ComponentResized

    private void sliderVelocidadeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVelocidadeStateChanged
        PanelSOM.setSleep(sliderVelocidade.getMaximum() - sliderVelocidade.getValue());
    }//GEN-LAST:event_sliderVelocidadeStateChanged

    private void panel3DMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_panel3DMouseWheelMoved
        if (evt.getPreciseWheelRotation() < 0) {
            if (Dvalue > -1000) {
                Dvalue -= 5;
            }
        } else if (evt.getPreciseWheelRotation() > 0) {
            if (Dvalue < 1000) {
                Dvalue += 5;
            }
        }
        drawMatrizU();
        drawEixos();
        repaint();
    }//GEN-LAST:event_panel3DMouseWheelMoved

    private void jComboBoxEixoZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEixoZActionPerformed
        if (rede != null) {
            // calcBase3D();
            //calcRede3D();
        }
        repaint();
    }//GEN-LAST:event_jComboBoxEixoZActionPerformed

    private void jComboBoxEixoXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEixoXActionPerformed
        repaint();
    }//GEN-LAST:event_jComboBoxEixoXActionPerformed

    private void jComboBoxEixoYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEixoYActionPerformed
        repaint();
    }//GEN-LAST:event_jComboBoxEixoYActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private static javax.swing.JComboBox jComboBoxEixoX;
    private static javax.swing.JComboBox jComboBoxEixoY;
    private static javax.swing.JComboBox jComboBoxEixoZ;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private static javax.swing.JLabel labelStatus;
    private static javax.swing.JPanel panel2D;
    private static javax.swing.JPanel panel3D;
    private static javax.swing.JPanel panelDensidade;
    private static javax.swing.JPanel panelFundoSom;
    private static javax.swing.JPanel panelSOM;
    private javax.swing.JSlider sliderDensidade;
    private javax.swing.JSlider sliderU2D;
    private javax.swing.JSlider sliderU3D;
    private javax.swing.JSlider sliderVelocidade;
    private static javax.swing.JProgressBar statusProgesso;
    private javax.swing.JTextArea textNeuronio;
    // End of variables declaration//GEN-END:variables

    public static void som() {
        if (som == null) {
            som = new SOMVisualization(null);
        }
        som.setSize(panelSOM.getWidth(), panelSOM.getHeight());
        panelSOM.add(som);
    }

    public static void matrizU3D() {
        calc3D();
        verificaCantos();
        drawMatrizU();
        drawEixos();
        u3d = new MatrizU3D();
        u3d.setSize(panel3D.getWidth(), panel3D.getHeight());
        panel3D.add(u3d);
    }

    public static void matrizU2D() {
        u2d = new MatrizU2D();
        u2d.setSize(panel2D.getWidth(), panel2D.getHeight());
        panel2D.add(u2d);
    }

    private static void densidade() {
        den = new MatrizDensidade();
        den.setSize(panelDensidade.getWidth(), panelDensidade.getHeight());
        panelDensidade.add(den);
    }

    private static void drawEixos() {
        eixos.clear();
        eixos = project.convert3Dto2D(Mcartesiano, 4, VRP, Dvalue, P);
    }

    public static void drawMatrizU() {
        project = new Projetor(panel3D.getWidth(), panel3D.getHeight());
        pontos2D = project.convert3Dto2D(Mpontos, numPontos, VRP, Dvalue, P);
        pontosDraw = new Point[gridMUX][gridMUY];

        for (int i = 0; i < gridMUX; i++) {
            for (int j = 0; j < gridMUY; j++) {
                pontosDraw[i][j] = pontos2D.get(0);
                pontos2D.remove(0);
            }
        }
    }

    public static void calc3D() {
        pontos3D = new Point3d[gridMUX][gridMUY];
        Point3d aux;
        for (int x = 0; x < gridMUX; x++) {
            for (int y = 0; y < gridMUY; y++) {
                aux = new Point3d(x, y, (matrizU[x][y]) * 5);
                pontos3D[x][y] = aux;
            }
        }

        Mpontos = new double[4][numPontos];
        pontos2D.clear();
        int count = 0;
        for (int i = 0; i < pontos3D.length; i++) {
            for (int j = 0; j < pontos3D[0].length; j++) {
                Mpontos[0][count] = pontos3D[i][j].x;
                Mpontos[1][count] = pontos3D[i][j].y;
                Mpontos[2][count] = pontos3D[i][j].z;
                Mpontos[3][count] = 1;
                ++count;
            }
        }
    }

    public void calcBase3D() {
        project = new Projetor(panelSOM.getWidth(), panelSOM.getHeight());
        Mbase = new double[4][dados.getDataSet().size()];

        for (int i = 0; i < dados.getDataSet().size(); i++) {
            Mbase[0][i] = dados.getDataSet().get(i).getAtributos().get(0);
            Mbase[1][i] = dados.getDataSet().get(i).getAtributos().get(1);
            Mbase[2][i] = dados.getDataSet().get(i).getAtributos().get(2);
            Mbase[3][i] = 1;

        }
        pontos2DBase = new ArrayList<>();
        pontos2DBase = project.convert3Dto2D(Mbase, dados.getDataSet().size(), VRP, Dvalue, P);
    }

    public void calcRede3D() {
        ArrayList<Neuronio> n = rede.getListNeuronios();
        project = new Projetor(panelSOM.getWidth(), panelSOM.getHeight());
        Mbase = new double[4][n.size()];

        for (int i = 0; i < n.size(); i++) {
            Mbase[0][i] = n.get(i).getPesos().get(0);
            Mbase[1][i] = n.get(i).getPesos().get(1);
            Mbase[2][i] = n.get(i).getPesos().get(2);
            Mbase[3][i] = 1;

        }
        pontos2DRede = new ArrayList<>();
        pontos2DRede = project.convert3Dto2D(Mbase, n.size(), VRP, Dvalue, P);

        pontosDrawRede = new Point[rede.getGridX()][rede.getGridY()];

        for (int i = 0; i < rede.getGridX(); i++) {
            for (int j = 0; j < rede.getGridY(); j++) {
                pontosDrawRede[i][j] = pontos2DRede.get(0);
                pontos2DRede.remove(0);
            }
        }
    }

    private static void verificaCantos() {
        double[] auxCanto = new double[4];

        for (int i = 0; i < 4; i++) {
            auxCanto[3] += Mpontos[i][0];
            auxCanto[2] += Mpontos[i][(gridMUX) - 1];
            auxCanto[1] += Mpontos[i][(numPontos) - (gridMUX)];
            auxCanto[0] += Mpontos[i][(numPontos) - 1];
        }
        auxCanto[0] = auxCanto[0] / 4; //canto 1
        auxCanto[1] = auxCanto[1] / 4; //canto 2
        auxCanto[2] = auxCanto[2] / 4; //canto 3
        auxCanto[3] = auxCanto[3] / 4; //canto 4

        double mediavrp = (VRP[0] + VRP[1] + VRP[2] + VRP[3]) / 4;

        for (int i = 0; i < 4; i++) {
            auxCanto[i] = Math.sqrt(Math.pow((mediavrp - auxCanto[i]), 2));
        }

        double max = 0;
        for (int i = 0; i < 4; i++) {
            if (auxCanto[i] > max) {
                max = auxCanto[i];
                canto1 = i + 1;
            }
        }

        switch (canto1) {
            case 1: //pode ir para canto 2 ou 3
                if (auxCanto[1] > auxCanto[2]) {
                    canto2 = 2;
                } else {
                    canto2 = 3;
                }
                break;
            case 2: //pode ir para canto 1 ou 4
                if (auxCanto[0] > auxCanto[3]) {
                    canto2 = 1;
                } else {
                    canto2 = 4;
                }
                break;
            case 3: //pode ir para canto 1 ou 4
                if (auxCanto[0] > auxCanto[3]) {
                    canto2 = 1;
                } else {
                    canto2 = 4;
                }
                break;
            case 4: //pode ir para canto 2 ou 3
                if (auxCanto[1] > auxCanto[2]) {
                    canto2 = 2;
                } else {
                    canto2 = 3;
                }
                break;
        }
    }

    public void giroDireita() {
        double rotZ[][] = {{Math.cos(Math.PI / 180 * 10), -Math.sin(Math.PI / 180 * 10), 0, 0},
            {Math.sin(Math.PI / 180 * 10), Math.cos(Math.PI / 180 * 10), 0, 0},
            {0, 0, 1, 0},
            {0, 0, 0, 1}};

        double origem[][] = {{1, 0, 0, -(centroX)},
            {0, 1, 0, -(centroY)},
            {0, 0, 1, 0},
            {0, 0, 0, 1}};

        double pos[][] = {{1, 0, 0, centroX},
            {0, 1, 0, centroY},
            {0, 0, 1, 0},
            {0, 0, 0, 1}};

        Mpontos = UtilKohonenVisualization.multiMatriz(origem, Mpontos, 4, numPontos);
        Mpontos = UtilKohonenVisualization.multiMatriz(rotZ, Mpontos, 4, numPontos);
        Mpontos = UtilKohonenVisualization.multiMatriz(pos, Mpontos, 4, numPontos);

        eixos.clear();
        Mcartesiano = UtilKohonenVisualization.multiMatriz(origem, Mcartesiano, 4, 4);
        Mcartesiano = UtilKohonenVisualization.multiMatriz(rotZ, Mcartesiano, 4, 4);
        Mcartesiano = UtilKohonenVisualization.multiMatriz(pos, Mcartesiano, 4, 4);
        eixos = project.convert3Dto2D(Mcartesiano, 4, VRP, Dvalue, P);

        verificaCantos();

        pontos2D = project.convert3Dto2D(Mpontos, numPontos, VRP, Dvalue, P);
        pontosDraw = new Point[gridMUX][gridMUY];

        for (int i = 0; i < gridMUX; i++) {
            for (int j = 0; j < gridMUY; j++) {
                pontosDraw[i][j] = pontos2D.get(0);
                pontos2D.remove(0);
            }
        }
        repaint();
    }

    public void giroEsquerda() {
        double rotZ[][] = {{Math.cos(Math.PI / 180 * -10), -Math.sin(Math.PI / 180 * -10), 0, 0},
            {Math.sin(Math.PI / 180 * -10), Math.cos(Math.PI / 180 * -10), 0, 0},
            {0, 0, 1, 0},
            {0, 0, 0, 1}};

        double origem[][] = {{1, 0, 0, -(centroX)},
            {0, 1, 0, -(centroY)},
            {0, 0, 1, 0},
            {0, 0, 0, 1}};

        double pos[][] = {{1, 0, 0, centroX},
            {0, 1, 0, centroY},
            {0, 0, 1, 0},
            {0, 0, 0, 1}};

        Mpontos = UtilKohonenVisualization.multiMatriz(origem, Mpontos, 4, numPontos);
        Mpontos = UtilKohonenVisualization.multiMatriz(rotZ, Mpontos, 4, numPontos);
        Mpontos = UtilKohonenVisualization.multiMatriz(pos, Mpontos, 4, numPontos);

        eixos.clear();
        Mcartesiano = UtilKohonenVisualization.multiMatriz(origem, Mcartesiano, 4, 4);
        Mcartesiano = UtilKohonenVisualization.multiMatriz(rotZ, Mcartesiano, 4, 4);
        Mcartesiano = UtilKohonenVisualization.multiMatriz(pos, Mcartesiano, 4, 4);
        eixos = project.convert3Dto2D(Mcartesiano, 4, VRP, Dvalue, P);

        verificaCantos();

        pontos2D = project.convert3Dto2D(Mpontos, numPontos, VRP, Dvalue, P);
        pontosDraw = new Point[gridX * 2 - 1][gridY * 2 - 1];

        for (int i = 0; i < gridMUX; i++) {
            for (int j = 0; j < gridMUY; j++) {
                pontosDraw[i][j] = pontos2D.get(0);
                pontos2D.remove(0);
            }
        }
        repaint();
    }

    public static void setDados(Base r) {
        dados = r;

        jComboBoxEixoX.removeAllItems();
        jComboBoxEixoY.removeAllItems();
        jComboBoxEixoZ.removeAllItems();

        jComboBoxEixoZ.addItem("");
        for (int i = 0; i < dados.getDataSet().get(0).getAtributos().size(); i++) {
            jComboBoxEixoX.addItem(dados.getAtributo(i));
            jComboBoxEixoY.addItem(dados.getAtributo(i));
            jComboBoxEixoZ.addItem(dados.getAtributo(i));
        }

        jComboBoxEixoX.setSelectedIndex(0);
        jComboBoxEixoY.setSelectedIndex(1);
        jComboBoxEixoZ.setSelectedIndex(0);
    }

    public static void setRede(RedeSOM r) {
        if (som == null) {
            som = new SOMVisualization(r);
        }
        rede = r;
        som.setRede(r);
    }

    public static ArrayList<Point> getPontos2DBase() {
        return pontos2DBase;
    }

    public static ArrayList<Point> getPontos2DRede() {
        return pontos2DRede;
    }

    public static void setStatus(int i) {
        if (statusProgesso != null) {
            statusProgesso.setValue(i);
            if (i == statusProgesso.getMaximum() - 1) {
                labelStatus.setText("Finalizado.");
            } else {
                Thread t = new Thread() {
                    @Override
                    public void run() {
                        switch (labelStatus.getText()) {
                            case "Executando":
                                labelStatus.setText("Executando.");
                                break;
                            case "Executando.":
                                labelStatus.setText("Executando..");
                                break;
                            case "Executando..":
                                labelStatus.setText("Executando...");
                                break;
                            case "Executando...":
                                labelStatus.setText("Executando");
                                break;
                        }
                    }
                };
                t.start();
            }
        }
    }

    public static void setLabel(String i) {
        if (labelStatus != null) {
            labelStatus.setText(i);
        }

    }

    public static void setMaxStatus(int i) {
        if (statusProgesso != null) {
            statusProgesso.setMaximum(i);
        }
    }

    public static double[][] getMatrizU() {
        return matrizU;
    }

    public static void setMatrizU(double[][] n) {
        matrizU = n;
    }

    public static int getGridMUX() {
        return gridMUX;
    }

    public static int getGridMUY() {
        return gridMUY;
    }

    public static int getCanto1() {
        return canto1;
    }

    public static int getCanto2() {
        return canto2;
    }

    public static Point getPontosDraw(int i, int j) {
        return pontosDraw[i][j];
    }

    public static Point getPontosDrawRede(int i, int j) {
        return pontosDrawRede[i][j];
    }

    public static Color getCor_linha() {
        return cor_linha;
    }

    public static int getValueDensidade() {
        return valueDensidade;
    }

    public static int getGridX() {
        return gridX;
    }

    public static int getGridY() {
        return gridY;
    }

    public static RedeSOM getRede() {
        return rede;
    }

    public static int getNeuronioX() {
        return neuronioX;
    }

    public static int getNeuronioY() {
        return neuronioY;
    }

    public static boolean isClick() {
        return click;
    }

    public static int getValueU2D() {
        return valueU2D;
    }

    public static Base getDados() {
        return dados;
    }

    public static JPanel getPanelSOM() {
        return panelSOM;
    }

    public static JComboBox getjComboBoxEixoX() {
        return jComboBoxEixoX;
    }

    public static JComboBox getjComboBoxEixoY() {
        return jComboBoxEixoY;
    }

    public static JComboBox getjComboBoxEixoZ() {
        return jComboBoxEixoZ;
    }

    public static ArrayList<Point> getEixos() {
        return eixos;
    }
}
